{% extends "base.html" %}

{% block title %}Dashboard - Task Tracker Pro{% endblock %}

{% block extra_css %}
<style>
    /* Dashboard-specific styles */
    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--space-8);
        padding: var(--space-6);
        background: linear-gradient(135deg, var(--primary-600), var(--primary-700));
        color: white;
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-lg);
    }

    .dashboard-welcome h1 {
        margin: 0 0 var(--space-2);
        font-size: 2rem;
        font-weight: 700;
    }

    .dashboard-welcome p {
        margin: 0;
        opacity: 0.9;
        font-size: 1.125rem;
    }

    .dashboard-level {
        text-align: right;
    }

    .level-badge {
        display: flex;
        align-items: center;
        gap: var(--space-2);
        background: rgba(255, 255, 255, 0.2);
        padding: var(--space-2) var(--space-4);
        border-radius: var(--radius-full);
        margin-bottom: var(--space-2);
        font-weight: 600;
    }

    .level-points {
        font-size: 0.875rem;
        opacity: 0.8;
    }

    .dashboard-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: var(--space-6);
        margin-bottom: var(--space-8);
    }

    .stat-card {
        background: var(--surface);
        border: 1px solid var(--border);
        border-radius: var(--radius-lg);
        padding: var(--space-6);
        display: flex;
        align-items: center;
        gap: var(--space-4);
        transition: all var(--transition);
        position: relative;
        overflow: hidden;
    }

    .stat-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: var(--primary-500);
        opacity: 0;
        transition: opacity var(--transition);
    }

    .stat-card:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
    }

    .stat-card:hover::before {
        opacity: 1;
    }

    .stat-icon {
        width: 48px;
        height: 48px;
        border-radius: var(--radius-lg);
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
    }

    .stat-icon.primary { background: var(--primary-100); color: var(--primary-600); }
    .stat-icon.success { background: var(--success-100); color: var(--success-600); }
    .stat-icon.warning { background: var(--warning-100); color: var(--warning-600); }
    .stat-icon.error { background: var(--danger-100); color: var(--danger-600); }

    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        color: var(--text);
        margin-bottom: var(--space-1);
    }

    .stat-label {
        font-size: 0.875rem;
        color: var(--text-secondary);
        font-weight: 500;
    }

    .dashboard-grid {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: var(--space-8);
        margin-bottom: var(--space-8);
    }

    .analytics-section {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: var(--space-6);
        margin-bottom: var(--space-8);
    }

    .chart-container {
        position: relative;
        height: 300px;
        background: var(--surface);
        border: 1px solid var(--border);
        border-radius: var(--radius-lg);
        padding: var(--space-6);
    }

    .productivity-insights {
        background: var(--surface);
        border: 1px solid var(--border);
        border-radius: var(--radius-lg);
        padding: var(--space-6);
    }

    .insight-item {
        display: flex;
        align-items: center;
        gap: var(--space-3);
        padding: var(--space-3);
        border-radius: var(--radius-md);
        transition: background-color var(--transition);
        margin-bottom: var(--space-2);
    }

    .insight-item:hover {
        background: var(--surface-2);
    }

    .insight-icon {
        width: 32px;
        height: 32px;
        border-radius: var(--radius-md);
        display: flex;
        align-items: center;
        justify-content: center;
        background: var(--primary-100);
        color: var(--primary-600);
        flex-shrink: 0;
    }

    .recent-activity {
        background: var(--surface);
        border: 1px solid var(--border);
        border-radius: var(--radius-lg);
        padding: var(--space-6);
    }

    .activity-item {
        display: flex;
        align-items: center;
        gap: var(--space-3);
        padding: var(--space-3);
        border-bottom: 1px solid var(--border);
        transition: background-color var(--transition);
    }

    .activity-item:last-child {
        border-bottom: none;
    }

    .activity-item:hover {
        background: var(--surface-2);
    }

    .activity-icon {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
    }

    .activity-icon.task { background: var(--primary-100); color: var(--primary-600); }
    .activity-icon.project { background: var(--success-100); color: var(--success-600); }
    .activity-icon.comment { background: var(--warning-100); color: var(--warning-600); }

    .activity-content {
        flex: 1;
    }

    .activity-title {
        font-weight: 500;
        font-size: 0.875rem;
        margin-bottom: var(--space-1);
    }

    .activity-time {
        font-size: 0.75rem;
        color: var(--text-secondary);
    }

    @media (max-width: 768px) {
        .dashboard-header {
            flex-direction: column;
            text-align: center;
            gap: var(--space-4);
        }

        .dashboard-grid {
            grid-template-columns: 1fr;
        }

        .analytics-section {
            grid-template-columns: 1fr;
        }

        .dashboard-stats {
            grid-template-columns: repeat(2, 1fr);
        }
    }

    @media (max-width: 480px) {
        .dashboard-stats {
            grid-template-columns: 1fr;
        }
    }
</style>
{% endblock %}

{% block content %}
<!-- Dashboard Header -->
<div class="dashboard-header">
    <div class="dashboard-welcome">
        <h1>Welcome back, {{ current_user.first_name }}! ðŸ‘‹</h1>
        <p>Let's make today productive. You're doing great!</p>
    </div>
    <div class="dashboard-level">
        <div class="level-badge">
            <i data-lucide="zap"></i>
            <span>Level {{ current_user.level or 1 }}</span>
        </div>
        <div class="level-points">{{ current_user.total_points or 0 }} points</div>
    </div>
</div>

<!-- Statistics Cards -->
<div class="dashboard-stats">
    <div class="stat-card" onclick="navigateToTasks()">
        <div class="stat-icon primary">
            <i data-lucide="check-square"></i>
        </div>
        <div class="stat-info">
            <div class="stat-number">{{ stats.total_tasks or 0 }}</div>
            <div class="stat-label">Total Tasks</div>
        </div>
    </div>
    
    <div class="stat-card" onclick="navigateToTasks('completed')">
        <div class="stat-icon success">
            <i data-lucide="check-circle"></i>
        </div>
        <div class="stat-info">
            <div class="stat-number">{{ stats.completed_tasks or 0 }}</div>
            <div class="stat-label">Completed</div>
        </div>
    </div>
    
    <div class="stat-card" onclick="navigateToTasks('in_progress')">
        <div class="stat-icon warning">
            <i data-lucide="clock"></i>
        </div>
        <div class="stat-info">
            <div class="stat-number">{{ stats.pending_tasks or 0 }}</div>
            <div class="stat-label">In Progress</div>
        </div>
    </div>
    
    <div class="stat-card" onclick="navigateToTasks('overdue')">
        <div class="stat-icon error">
            <i data-lucide="alert-circle"></i>
        </div>
        <div class="stat-info">
            <div class="stat-number">{{ stats.overdue_tasks or 0 }}</div>
            <div class="stat-label">Overdue</div>
        </div>
    </div>
</div>

<!-- Analytics Section -->
<div class="analytics-section">
    <div class="chart-container">
        <h3 style="margin-top: 0; margin-bottom: var(--space-4);">Task Completion Trend</h3>
        <canvas id="completionChart"></canvas>
    </div>
    <div class="chart-container">
        <h3 style="margin-top: 0; margin-bottom: var(--space-4);">Priority Distribution</h3>
        <canvas id="priorityChart"></canvas>
    </div>
</div>

<!-- Main Dashboard Grid -->
<div class="dashboard-grid">
    <!-- Recent Tasks & Projects -->
    <div>
        <!-- Recent Tasks -->
        <div class="card mb-6">
            <div class="card-header">
                <h3 class="card-title">Recent Tasks</h3>
                <a href="{{ url_for('tasks.create_task') }}" class="btn btn-primary btn-sm">
                    <i data-lucide="plus"></i> New Task
                </a>
            </div>
            <div class="card-body">
                {% if recent_tasks %}
                    <div class="task-list">
                        {% for task in recent_tasks %}
                        <div class="task-item priority-{{ task.priority }}" data-task-id="{{ task.id }}">
                            <div class="task-content">
                                <div class="task-header">
                                    <h4 class="task-title">{{ task.title }}</h4>
                                    <div class="task-meta">
                                        {% if task.project %}
                                            <span class="badge badge-primary">{{ task.project.name }}</span>
                                        {% endif %}
                                        <span class="badge badge-{{ 'success' if task.status == 'completed' else 'warning' if task.status == 'in_progress' else 'secondary' }}">
                                            {{ task.status.replace('_', ' ').title() }}
                                        </span>
                                    </div>
                                </div>
                                {% if task.description %}
                                    <p class="task-description">{{ task.description[:100] }}...</p>
                                {% endif %}
                                <div class="task-footer">
                                    {% if task.due_date %}
                                        <span class="task-due">
                                            <i data-lucide="calendar"></i>
                                            Due: {{ task.due_date.strftime('%b %d, %Y') }}
                                        </span>
                                    {% endif %}
                                    <div class="task-actions">
                                        <button onclick="toggleTaskStatus({{ task.id }})" class="btn btn-sm {{ 'btn-success' if task.status != 'completed' else 'btn-secondary' }}">
                                            <i data-lucide="{{ 'check' if task.status != 'completed' else 'undo' }}"></i>
                                            {{ 'Complete' if task.status != 'completed' else 'Reopen' }}
                                        </button>
                                        <a href="{{ url_for('tasks.view_task', id=task.id) }}" class="btn btn-secondary btn-sm">
                                            <i data-lucide="eye"></i> View
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                    <div class="text-center mt-4">
                        <a href="{{ url_for('tasks.list_tasks') }}" class="btn btn-secondary">
                            View All Tasks <i data-lucide="arrow-right"></i>
                        </a>
                    </div>
                {% else %}
                    <div class="empty-state">
                        <i data-lucide="inbox" class="empty-icon"></i>
                        <h4>No tasks yet</h4>
                        <p>Create your first task to get started!</p>
                        <a href="{{ url_for('tasks.create_task') }}" class="btn btn-primary">
                            <i data-lucide="plus"></i> Create Task
                        </a>
                    </div>
                {% endif %}
            </div>
        </div>

        <!-- Recent Projects -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Active Projects</h3>
                <a href="{{ url_for('projects.create_project') }}" class="btn btn-primary btn-sm">
                    <i data-lucide="plus"></i> New Project
                </a>
            </div>
            <div class="card-body">
                {% if recent_projects %}
                    <div class="project-list">
                        {% for project in recent_projects %}
                        <div class="project-item" onclick="window.location.href='{{ url_for('projects.view_project', id=project.id) }}'">
                            <div class="project-content">
                                <h4 class="project-title">{{ project.name }}</h4>
                                {% if project.description %}
                                    <p class="project-description">{{ project.description[:100] }}...</p>
                                {% endif %}
                                <div class="project-footer">
                                    <span class="badge badge-{{ 'success' if project.status == 'completed' else 'warning' if project.status == 'in_progress' else 'secondary' }}">
                                        {{ project.status.replace('_', ' ').title() }}
                                    </span>
                                    <span class="project-tasks">{{ project.tasks|length }} tasks</span>
                                </div>
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                    <div class="text-center mt-4">
                        <a href="{{ url_for('projects.list_projects') }}" class="btn btn-secondary">
                            View All Projects <i data-lucide="arrow-right"></i>
                        </a>
                    </div>
                {% else %}
                    <div class="empty-state">
                        <i data-lucide="folder" class="empty-icon"></i>
                        <h4>No projects yet</h4>
                        <p>Create your first project to organize your tasks!</p>
                        <a href="{{ url_for('projects.create_project') }}" class="btn btn-primary">
                            <i data-lucide="plus"></i> Create Project
                        </a>
                    </div>
                {% endif %}
            </div>
        </div>
    </div>

    <!-- Sidebar -->
    <div class="dashboard-sidebar">
        <!-- Productivity Insights -->
        <div class="productivity-insights">
            <h3 style="margin-top: 0; margin-bottom: var(--space-4);">Productivity Insights</h3>
            <div class="insight-item">
                <div class="insight-icon">
                    <i data-lucide="trending-up"></i>
                </div>
                <div>
                    <div style="font-weight: 600; font-size: 0.875rem;">Completion Rate</div>
                    <div style="font-size: 0.75rem; color: var(--text-secondary);">
                        {{ "%.1f"|format((stats.completed_tasks / stats.total_tasks * 100) if stats.total_tasks > 0 else 0) }}% this week
                    </div>
                </div>
            </div>
            <div class="insight-item">
                <div class="insight-icon">
                    <i data-lucide="clock"></i>
                </div>
                <div>
                    <div style="font-weight: 600; font-size: 0.875rem;">Avg. Task Time</div>
                    <div style="font-size: 0.75rem; color: var(--text-secondary);">
                        {{ analytics.avg_completion_time if analytics and analytics.avg_completion_time else '2.3' }} hours
                    </div>
                </div>
            </div>
            <div class="insight-item">
                <div class="insight-icon">
                    <i data-lucide="target"></i>
                </div>
                <div>
                    <div style="font-weight: 600; font-size: 0.875rem;">Weekly Goal</div>
                    <div style="font-size: 0.75rem; color: var(--text-secondary);">
                        {{ stats.completed_tasks or 0 }}/{{ (stats.total_tasks or 0) + 5 }} tasks
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Activity -->
        <div class="recent-activity">
            <h3 style="margin-top: 0; margin-bottom: var(--space-4);">Recent Activity</h3>
            <div id="activity-feed">
                {% for activity in recent_activity[:5] %}
                    <div class="activity-item">
                        <div class="activity-icon {{ 'task' if 'task' in activity.type else 'project' if 'project' in activity.type else 'comment' }}">
                            <i data-lucide="{{ 'check-circle' if activity.type == 'task_completed' else 'plus-circle' if activity.type == 'task_created' else 'folder' if 'project' in activity.type else 'message-circle' }}"></i>
                        </div>
                        <div class="activity-content">
                            <div class="activity-title">{{ activity.description }}</div>
                            <div class="activity-time">{{ activity.created_at.strftime('%b %d, %H:%M') if activity.created_at else 'Just now' }}</div>
                        </div>
                    </div>
                {% else %}
                    <div class="empty-state-mini">
                        <i data-lucide="activity"></i>
                        <p>No recent activity</p>
                    </div>
                {% endfor %}
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
    // Dashboard-specific JavaScript
    let completionChart, priorityChart;

    document.addEventListener('DOMContentLoaded', function() {
        // Initialize charts
        initializeCharts();
        
        // Load real-time data
        loadDashboardData();
        
        // Setup auto-refresh
        setInterval(loadDashboardData, 300000); // Refresh every 5 minutes
        
        // Initialize drag and drop for tasks
        initializeTaskDragDrop();
    });

    function initializeCharts() {
        // Task Completion Trend Chart
        const completionCtx = document.getElementById('completionChart');
        if (completionCtx) {
            completionChart = new Chart(completionCtx, {
                type: 'line',
                data: {
                    labels: {{ chart_data.completion_labels|tojson if chart_data and chart_data.completion_labels else '[]'|safe }},
                    datasets: [{
                        label: 'Tasks Completed',
                        data: {{ chart_data.completion_data|tojson if chart_data and chart_data.completion_data else '[]'|safe }},
                        borderColor: 'rgb(59, 130, 246)',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            }
                        }
                    }
                }
            });
        }

        // Priority Distribution Chart
        const priorityCtx = document.getElementById('priorityChart');
        if (priorityCtx) {
            priorityChart = new Chart(priorityCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Low', 'Medium', 'High', 'Urgent'],
                    datasets: [{
                        data: {{ chart_data.priority_data|tojson if chart_data and chart_data.priority_data else '[0, 0, 0, 0]'|safe }},
                        backgroundColor: [
                            '#10b981',
                            '#3b82f6',
                            '#f59e0b',
                            '#ef4444'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }
    }

    function loadDashboardData() {
        // Load analytics data
        fetch('/api/analytics/dashboard')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateCharts(data.chart_data);
                    updateActivityFeed(data.recent_activity);
                }
            })
            .catch(error => console.error('Error loading dashboard data:', error));
    }

    function updateCharts(chartData) {
        if (completionChart && chartData.completion_data) {
            completionChart.data.labels = chartData.completion_labels;
            completionChart.data.datasets[0].data = chartData.completion_data;
            completionChart.update();
        }

        if (priorityChart && chartData.priority_data) {
            priorityChart.data.datasets[0].data = chartData.priority_data;
            priorityChart.update();
        }
    }

    function updateActivityFeed(activities) {
        const feed = document.getElementById('activity-feed');
        if (!feed || !activities) return;

        feed.innerHTML = activities.map(activity => `
            <div class="activity-item">
                <div class="activity-icon ${activity.type.includes('task') ? 'task' : activity.type.includes('project') ? 'project' : 'comment'}">
                    <i data-lucide="${getActivityIcon(activity.type)}"></i>
                </div>
                <div class="activity-content">
                    <div class="activity-title">${activity.description}</div>
                    <div class="activity-time">${formatTimeAgo(activity.created_at)}</div>
                </div>
            </div>
        `).join('');

        lucide.createIcons();
    }

    function getActivityIcon(type) {
        const icons = {
            'task_completed': 'check-circle',
            'task_created': 'plus-circle',
            'task_updated': 'edit',
            'project_created': 'folder',
            'comment_added': 'message-circle'
        };
        return icons[type] || 'activity';
    }

    function navigateToTasks(filter = '') {
        let url = '/tasks';
        if (filter) {
            url += `?status=${filter}`;
        }
        window.location.href = url;
    }

    function toggleTaskStatus(taskId) {
        const taskElement = document.querySelector(`[data-task-id="${taskId}"]`);
        const button = taskElement.querySelector('button[onclick*="toggleTaskStatus"]');
        const originalText = button.textContent.trim();
        
        button.textContent = 'Updating...';
        button.disabled = true;

        fetch(`/api/tasks/${taskId}/toggle-status`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Update task status badge
                const badge = taskElement.querySelector('.badge');
                if (data.task.status === 'completed') {
                    badge.className = 'badge badge-success';
                    badge.textContent = 'Completed';
                    button.innerHTML = '<i data-lucide="undo"></i> Reopen';
                    button.className = 'btn btn-sm btn-secondary';
                } else {
                    badge.className = 'badge badge-warning';
                    badge.textContent = 'In Progress';
                    button.innerHTML = '<i data-lucide="check"></i> Complete';
                    button.className = 'btn btn-sm btn-success';
                }
                
                lucide.createIcons();
                showToast(`Task ${data.task.status === 'completed' ? 'completed' : 'reopened'} successfully!`, 'success');
                
                // Refresh statistics after a short delay
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            } else {
                showToast('Failed to update task status', 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showToast('Failed to update task status', 'error');
        })
        .finally(() => {
            button.textContent = originalText;
            button.disabled = false;
        });
    }

    function initializeTaskDragDrop() {
        // Simple drag and drop for task reordering
        const taskItems = document.querySelectorAll('.task-item');
        taskItems.forEach(task => {
            task.draggable = true;
            task.addEventListener('dragstart', handleDragStart);
            task.addEventListener('dragover', handleDragOver);
            task.addEventListener('drop', handleDrop);
        });
    }

    function handleDragStart(e) {
        e.dataTransfer.setData('text/plain', e.target.dataset.taskId);
        e.target.style.opacity = '0.5';
    }

    function handleDragOver(e) {
        e.preventDefault();
    }

    function handleDrop(e) {
        e.preventDefault();
        const draggedTaskId = e.dataTransfer.getData('text/plain');
        const targetTaskId = e.target.closest('.task-item')?.dataset.taskId;
        
        if (draggedTaskId && targetTaskId && draggedTaskId !== targetTaskId) {
            // Here you could implement task reordering
            console.log('Reorder task', draggedTaskId, 'to position of', targetTaskId);
        }
        
        // Reset opacity
        document.querySelectorAll('.task-item').forEach(task => {
            task.style.opacity = '1';
        });
    }

    // Keyboard shortcuts
    document.addEventListener('keydown', function(e) {
        // Ctrl/Cmd + N for new task
        if ((e.ctrlKey || e.metaKey) && e.key === 'n' && !e.target.matches('input, textarea')) {
            e.preventDefault();
            openQuickTaskModal();
        }
        
        // Ctrl/Cmd + P for new project
        if ((e.ctrlKey || e.metaKey) && e.key === 'p' && !e.target.matches('input, textarea')) {
            e.preventDefault();
            window.location.href = '/projects/create';
        }
    });
</script>
{% endblock %}
                            </span>
                        </div>
                        <div class="project-actions">
                            <a href="{{ url_for('projects.view_project', id=project.id) }}" class="btn btn-secondary btn-sm">
                                <i data-lucide="eye"></i> View
                            </a>
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>
        {% if projects|length > 6 %}
            <div class="text-center mt-6">
                <a href="{{ url_for('projects.list_projects') }}" class="btn btn-secondary">
                    View All Projects <i data-lucide="arrow-right"></i>
                </a>
            </div>
        {% endif %}
    </div>
</div>
{% endif %}

<style>
    /* Dashboard specific styles */
    .dashboard-header {
        background: var(--gradient-primary);
        color: white;
        padding: var(--space-8);
        border-radius: var(--radius-xl);
        margin-bottom: var(--space-8);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .dashboard-welcome h1 {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: var(--space-2);
        color: white;
    }

    .dashboard-welcome p {
        font-size: 1.125rem;
        opacity: 0.9;
        margin: 0;
        color: white;
    }

    .level-badge {
        display: flex;
        align-items: center;
        gap: var(--space-2);
        background: rgba(255, 255, 255, 0.2);
        padding: var(--space-2) var(--space-4);
        border-radius: var(--radius-full);
        font-weight: 600;
        margin-bottom: var(--space-2);
    }

    .level-points {
        text-align: right;
        opacity: 0.8;
        font-size: 0.875rem;
    }

    .dashboard-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: var(--space-6);
        margin-bottom: var(--space-8);
    }

    .stat-card {
        background: var(--surface);
        border: 1px solid var(--border);
        border-radius: var(--radius-lg);
        padding: var(--space-6);
        display: flex;
        align-items: center;
        gap: var(--space-4);
        transition: all var(--transition);
    }

    .stat-card:hover {
        transform: translateY(-4px);
        box-shadow: var(--shadow-lg);
    }

    .stat-icon {
        width: 3rem;
        height: 3rem;
        border-radius: var(--radius-lg);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
    }

    .stat-icon.primary {
        background: var(--primary-100);
        color: var(--primary-600);
    }

    .stat-icon.success {
        background: #dcfce7;
        color: var(--success-500);
    }

    .stat-icon.warning {
        background: #fef3c7;
        color: var(--warning-500);
    }

    .stat-icon.error {
        background: #fee2e2;
        color: var(--error-500);
    }

    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        color: var(--text);
        line-height: 1;
        margin-bottom: var(--space-1);
    }

    .stat-label {
        color: var(--text-secondary);
        font-size: 0.875rem;
        font-weight: 500;
    }

    .dashboard-sidebar .card {
        height: fit-content;
    }

    .quick-actions {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: var(--space-3);
    }

    .quick-action {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: var(--space-2);
        padding: var(--space-4);
        border: 1px solid var(--border);
        border-radius: var(--radius-lg);
        text-decoration: none;
        color: var(--text-secondary);
        transition: all var(--transition);
    }

    .quick-action:hover {
        background: var(--surface-2);
        border-color: var(--primary-300);
        color: var(--primary-600);
        transform: translateY(-2px);
    }

    .progress-item {
        margin-bottom: var(--space-4);
    }

    .progress-item:last-child {
        margin-bottom: 0;
    }

    .progress-label {
        display: flex;
        justify-content: space-between;
        margin-bottom: var(--space-2);
        font-size: 0.875rem;
        font-weight: 500;
    }

    .activity-feed {
        max-height: 300px;
        overflow-y: auto;
    }

    .activity-item {
        display: flex;
        gap: var(--space-3);
        padding: var(--space-3) 0;
        border-bottom: 1px solid var(--border);
    }

    .activity-item:last-child {
        border-bottom: none;
    }

    .activity-icon {
        width: 2rem;
        height: 2rem;
        border-radius: var(--radius-md);
        background: var(--surface-2);
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
    }

    .activity-content p {
        margin: 0 0 var(--space-1);
        font-size: 0.875rem;
        color: var(--text);
    }

    .activity-time {
        font-size: 0.75rem;
        color: var(--text-muted);
    }

    .empty-state {
        text-align: center;
        padding: var(--space-8);
    }

    .empty-icon {
        width: 4rem;
        height: 4rem;
        color: var(--text-muted);
        margin-bottom: var(--space-4);
    }

    .empty-state-mini {
        text-align: center;
        padding: var(--space-4);
        color: var(--text-muted);
    }

    .col-span-2 {
        grid-column: span 2;
    }

    @media (max-width: 1024px) {
        .grid-cols-3 {
            grid-template-columns: 1fr;
        }
        
        .col-span-2 {
            grid-column: span 1;
        }
        
        .dashboard-header {
            flex-direction: column;
            text-align: center;
            gap: var(--space-4);
        }
    }

    @media (max-width: 768px) {
        .dashboard-stats {
            grid-template-columns: repeat(2, 1fr);
        }
        
        .quick-actions {
            grid-template-columns: 1fr;
        }
    }
</style>
{% endblock %}

{% block extra_js %}
<script>
    // Add smooth animations
    document.addEventListener('DOMContentLoaded', function() {
        // Animate stat numbers
        const statNumbers = document.querySelectorAll('.stat-number');
        statNumbers.forEach(stat => {
            const finalValue = parseInt(stat.textContent);
            let currentValue = 0;
            const increment = finalValue / 30;
            
            const timer = setInterval(() => {
                currentValue += increment;
                if (currentValue >= finalValue) {
                    stat.textContent = finalValue;
                    clearInterval(timer);
                } else {
                    stat.textContent = Math.floor(currentValue);
                }
            }, 50);
        });
        
        // Initialize Lucide icons
        lucide.createIcons();
    });
</script>
{% endblock %}
